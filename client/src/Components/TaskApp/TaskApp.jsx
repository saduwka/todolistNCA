import { useState, useEffect, useCallback, useMemo } from "react";
import styles from "./TaskApp.module.css";
import TaskList from "../TaskList/TaskList";
import TaskForm from "../TaskForm/TaskForm";
import TaskModal from "../TaskModal/TaskModal";
import TaskSearch from "../TaskSearch/TaskSearch";
import { auth, signInWithGoogle, logOut } from "../../firebase";
import { onAuthStateChanged } from "firebase/auth";
import { useNavigate } from "react-router-dom";


const API_URL =
	"https://todolistnca-production.up.railway.app";

export default function TaskApp() {
	const [tasks, setTasks] = useState([]);
	const [loading, setLoading] = useState(false);
	const [error, setError] = useState("");
	const [activeTab, setActiveTab] = useState("active");
	const [editingTask, setEditingTask] = useState(null);
	const [isModalOpen, setIsModalOpen] = useState(false);
	const [searchQuery, setSearchQuery] = useState("");
	const [visibleTasksCount, setVisibleTasksCount] = useState(5); // –ù–∞—á–∏–Ω–∞–µ–º —Å 5 –∑–∞–¥–∞—á
	const [user, setUser] = useState(null);
	const navigate = useNavigate();


	useEffect(() => {
		const unsubscribe = onAuthStateChanged(auth, (currentUser) => {
			console.log("currentUser:", currentUser);  // –î–æ–±–∞–≤—å –ª–æ–≥ –∑–¥–µ—Å—å
			setUser(currentUser);
			if (currentUser) {
				localStorage.setItem("token", currentUser.accessToken);
			} else {
				localStorage.removeItem("token");
			}
		});
		return () => unsubscribe();
	}, []);

	const token = localStorage.getItem("token");

	const handleLogout = async () => {
		try {
		  await logOut(); // –í—ã–∑–æ–≤ –≤—ã—Ö–æ–¥–∞ –∏–∑ Firebase
		  setTasks([]); // –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
		  localStorage.removeItem("token"); // –£–¥–∞–ª–∏—Ç—å —Ç–æ–∫–µ–Ω
		  navigate("/login"); // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
		} catch (err) {
		  console.error("–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:", err);
		}
	  };
	  



	console.log("–¢–æ–∫–µ–Ω –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞:", token);
	const fetchTasks = useCallback(async () => {
		try {
			setError("");
	
			const token = localStorage.getItem("token");
			if (!token) {
				throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
			}
	
			const res = await fetch(`${API_URL}/tasks`, {
				headers: {
					"Authorization": `Bearer ${token}`, // üîπ –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ–∫–µ–Ω
				},
			});
	
			if (!res.ok) throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö");
			const data = await res.json();
	
			setTasks(data);
		} catch (err) {
			setError(err.message);
		}
	}, []);

	useEffect(() => {
		fetchTasks(false); // –ë–µ–∑ –≤–∫–ª—é—á–µ–Ω–∏—è loading
		const interval = setInterval(() => {
			fetchTasks(false);
		}, 5000);
		return () => clearInterval(interval);
	}, [fetchTasks]);

	const filteredTasks = useMemo(() => {
		return tasks.filter((task) => {
			const isStatusMatch =
				activeTab === "active" ? !task.completed : task.completed;
			const isSearchMatch = task.title
				.toLowerCase()
				.includes(searchQuery.toLowerCase());
			return isStatusMatch && isSearchMatch;
		});
	}, [tasks, activeTab, searchQuery]);

	const visibleTasks = filteredTasks.slice(0, visibleTasksCount);

	const loadMoreTasks = () => {
		setVisibleTasksCount((prevCount) => prevCount + 5);
	};

	const handleTaskAction = async (url, requestMethod, body = null) => {
		try {
			setLoading(true);
			setError("");
	
			const token = localStorage.getItem("token");
			if (!token) throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
	
			const options = {
				method: requestMethod,  // <-- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º requestMethod –≤–º–µ—Å—Ç–æ method
				headers: { 
					"Content-Type": "application/json",
					"Authorization": `Bearer ${token}`
				},
				body: body ? JSON.stringify(body) : null,
			};
	
			const res = await fetch(url, options);
			if (!res.ok) throw new Error("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞");
	
			await fetchTasks(true); // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
		} catch (err) {
			setError(err.message);
		} finally {
			setLoading(false);
		}
	};

	const addTask = async ({ title, description }) => {
		try {
			setLoading(true);
			setError("");
	
			const token = localStorage.getItem("token");
			if (!token) throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
	
			const newTask = {
				title,
				description,
				completed: false,
				date: new Date().toISOString(),
				userId: user?.uid, // üîπ –î–æ–±–∞–≤–ª—è–µ–º userId
			};
	
			const res = await fetch(`${API_URL}/tasks`, {
				method: "POST",
				headers: {
					"Content-Type": "application/json",
					"Authorization": `Bearer ${token}` // üîπ –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ–∫–µ–Ω
				},
				body: JSON.stringify(newTask),
			});
	
			if (!res.ok) throw new Error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏");
	
			const savedTask = await res.json();
			setTasks((prevTasks) => [savedTask, ...prevTasks]);
			setVisibleTasksCount((prev) => prev + 1);
		} catch (err) {
			setError(err.message);
		} finally {
			setLoading(false);
		}
	};

	const toggleTask = async (task) => {
    try {
        const updatedTask = { completed: !task.completed };
        const token = localStorage.getItem("token");
		if (!token) throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");

        const res = await fetch(`${API_URL}/tasks/${task.id}`, {
            method: "PATCH",
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${token}`
            },
            body: JSON.stringify(updatedTask),
        });

        if (!res.ok) throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏");

        fetchTasks(true);
    } catch (err) {
        setError(err.message);
    }
};

const updateTask = async (task) => {
    try {
        const token = localStorage.getItem("token");
        if (!token) throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");

        const res = await fetch(`${API_URL}/tasks/${task.id}`, {
            method: "PATCH",
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${token}` // üîπ –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ–∫–µ–Ω
            },
            body: JSON.stringify(task),
        });

        if (!res.ok) throw new Error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏");

        fetchTasks(true);
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:", err);
    }
};

const deleteTask = (id) => {
    if (window.confirm("–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É?")) {
        const token = localStorage.getItem("token");
        if (!token) {
            setError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
            return;
        }

        handleTaskAction(`${API_URL}/tasks/${id}`, "DELETE", null, token);
    }
};

	const handleTabChange = (tab) => {
		setActiveTab(tab);
	};

	const handleModalClose = () => {
		if (!user) return; // –£–±–µ–¥–∏—Å—å, —á—Ç–æ –º–æ–¥–∞–ª–∫–∞ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		setIsModalOpen(false);
		setEditingTask(null);
	};

	const activeTasksCount = tasks.filter((task) => !task.completed).length;
	const completedTasksCount = tasks.filter((task) => task.completed).length;

	return (
		<>
    <div className={styles.container}>
		<div className={styles.header}>
   			<h1 className={styles.title}>üìù Tasks</h1>{user ? (
				<div className={styles.userInfo}>
            		<img src={user.photoURL} alt="Avatar" className={styles.avatar} />
            			<span>{user.displayName}</span>
							<button onClick={handleLogout} className={styles.authButton}>Log out</button>
        </div>
    ) : (
        <button className={styles.buttonGoogle} onClick={signInWithGoogle}>
  			<img src="https://www.google.com/favicon.ico" alt="Google logo" />
  			Sign in with Google
			</button>
    )}
	</div>
        {error && <p className={styles.error}>{error}</p>}

        <TaskForm onAdd={addTask} loading={loading} />
        <TaskSearch onSearch={setSearchQuery} />

        <div className={styles.tabs}>
			<button
				className={`${styles.tabButton} ${activeTab === "active" ? styles.activeTab : ""}`}
				onClick={() => setActiveTab("active")}>In Progress ({activeTasksCount})
			</button>
			<button
				className={`${styles.tabButton} ${activeTab === "completed" ? styles.activeTab : ""}`}
				onClick={() => setActiveTab("completed")}>Completed ({completedTasksCount})
			</button>
        </div>
		{loading && (
			<div className={styles.loaderOverlay}>
				<div className={styles.loader}></div>
			</div>
		)}

        <TaskList
            tasks={visibleTasks}
            onEdit={(task) => {
                setEditingTask(task);
                setIsModalOpen(true);
            }}
            onToggle={toggleTask}
            onDelete={deleteTask}
        />

        <button
            className={styles.showMoreButton}
            onClick={loadMoreTasks}
            disabled={visibleTasksCount >= filteredTasks.length}
        >
            Show More
        </button>
		
   
		<div className={styles.footer}>
			Made with <span className={styles.heart}>‚ù§Ô∏è</span> by SADuwka
		</div>

        <TaskModal
            isOpen={isModalOpen}
            task={editingTask}
            onClose={handleModalClose}
            onSave={updateTask}
        />
    </div>
</>
	);
}
